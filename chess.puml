@startuml
class Board {
    +Board(int size)
    -Board(int size, Piece[][] board)
    +Piece[][] pieces
    -int dimensions
    -void checkSquare(int x, int y)
    -boolean isSamePiece(Piece checkPiece, int x, int y)
    +void move(Piece piece, int toX, int toY)
    +Board setPiece(Piece piece, int x, int y)
    +Board move(Piece piece, int fromX, int fromY, int toX, int toY)
}

class Piece {
    +boolean color
    -final ChessPieceType type;
}

enum ChessPieceType {
    PAWN, KNIGHT, BISHOP, ROOK, QUEEN, KING
}

Piece o-- ChessPieceType
Board o-- Piece

'class Pawn extends Piece{
'    +boolean firstMove
'    +color color
'    +int x
'    +int y
'    +boolean move(int x, int y)
'    +boolean lostPiece(int x, int y)
'}
'class Knight extends Piece{
'    +color color
'    +int x
'    +int y
'    +boolean move(int x, int y)
'    +boolean eatPiece(int x, int y)
'}
'class Rook extends Piece{
'    +boolean castling
'    +color color
'    +int x
'    +int y
'    +boolean move(int x, int y)
'    +boolean eatPiece(int x, int y)
'}
'class Bishop extends Piece{
'    +color color
'    +int x
'    +int y
'    +boolean move(int x, int y)
'    +boolean eatPiece(int x, int y)
'}
'class Queen extends Piece{
'    +color color
'    +int x
'    +int y
'    +boolean move(int x, int y)
'    +boolean eatPiece(int x, int y)
'}
'class King extends Piece{
'    +color color
'    +int x
'    +int y
'    +boolean move(int x, int y)
'    +boolean eatPiece(int x, int y)
'}

@enduml